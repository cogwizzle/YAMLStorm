#!/Library/Frameworks/Python.framework/Versions/3.12/bin/python3
# This script reads YAML files and converts them into CURL requests.
# 
# Usage:
# yaml-storm <yaml_file>
# yaml-storm generate <folder>
import curlify
import os
import requests
import sys
import yaml

template = '''url: "https://example.com"
method: "GET"
headers:
  Content-Type: 'application/json'
data:
  name: "John Doe"
  age: 30
'''

makefile_template = '''.PHONY: request
request:
  EXAMPLE="example" \\
    yaml-storm request.yaml
'''


def help():
    sys.stderr.write("yaml-storm: A simple YAML to CURL converter\n")
    sys.stderr.write("Usage: yaml-storm <yaml_file>\n")
    sys.stderr.write("This script reads YAML files and converts them into CURL requests.\n")
    sys.stderr.write("Example:\n")
    sys.stderr.write("example.yml\n")
    sys.stderr.write("```yaml\n")
    sys.stderr.write("url: \"https://example.com\"\n")
    sys.stderr.write("method: \"GET\"\n")
    sys.stderr.write("headers:\n")
    sys.stderr.write("  Content-Type: 'application/json'\n")
    sys.stderr.write("data:\n")
    sys.stderr.write("  name: \"John Doe\"\n")
    sys.stderr.write("  age: 30\n")
    sys.stderr.write("```\n")
    sys.stderr.write("To generate a YAML file template, use:\n")
    sys.stderr.write("yaml-storm generate <folder>\n")
    sys.stderr.write("This will create a folder with a request.yaml file and a Makefile.\n")
    sys.stderr.write("```\n")
    sys.stderr.write("Generate curl command from YAML file:\n")
    sys.stderr.write("<vars> yaml-storm curl <file>\n")
    sys.exit(1)

def validateArguments():
    if len(sys.argv) < 2:
        return False
    if sys.argv[1] == 'generate':
        if len(sys.argv) < 3:
            return False
    return True

def validateFolderDoesNotExist(folder):
    if os.path.exists(folder):
        sys.stderr.write(f"Error: Folder '{folder}' already exists.\n")
        sys.exit(1)

# Substitute all variables in a file with their environment variable values
# Format of the variables is {{var_name}}.
def substituteVariables(file_path):
    with open(file_path, 'r') as file:
        data = file.read()
    for var in os.environ:
        data = data.replace(f'{{{{{var}}}}}', os.environ[var])
    return data

# Generate a YAML file if the user requests it
def generateYaml(file_path):
    filename = os.path.join(os.path.basename(file_path), 'request.yaml')
    with open(filename, 'w') as file:
        file.write(template)
    sys.stderr.write(f"YAML file created at {filename}\n")

# Generate Makefile
def generateMakefile(folder):
    filename = os.path.join(folder, 'Makefile')
    with open(filename, 'w') as file:
        file.write(makefile_template)
    sys.stderr.write(f"Makefile created at {filename}\n")

# Using curlify to generate a curl command from the YAML file
def generateCurlCommand(yaml_file):
    cwd = os.getcwd()
    file_path = os.path.join(cwd, yaml_file)

    raw_content = substituteVariables(file_path)
    data = yaml.safe_load(raw_content)
    
    url = data.get('url')
    method = data.get('method', 'GET').upper()
    headers = data.get('headers', {})
    data = data.get('data', {})

    response = requests.request(method, url, headers=headers, json=data)
    return curlify.to_curl(response.request)
  
def main():
    isDebug = os.getenv('DEBUG')
    if not validateArguments():
        help()
        sys.exit(1)

    if sys.argv[1] == 'generate':
        folder = sys.argv[2]
        validateFolderDoesNotExist(folder)
        os.makedirs(folder, exist_ok=False)
        generateYaml(folder)
        generateMakefile(folder)
        sys.exit(0)
    if sys.argv[1] == 'curl':
        if len(sys.argv) < 3:
            sys.stderr.write("Error: Please provide a YAML file to convert to CURL.\n")
            sys.exit(1)
        yaml_file = sys.argv[2]
        curl_command = generateCurlCommand(yaml_file)
        print(curl_command)
        sys.exit(0)

    yaml_file = sys.argv[1]

    cwd = os.getcwd()
    file_path = os.path.join(cwd, yaml_file)

    raw_content = substituteVariables(file_path)
    data = yaml.safe_load(raw_content)

    # Extract URL, method, headers, and data
    url = data.get('url')
    method = data.get('method', 'GET').upper()
    headers = data.get('headers', [])
    data = data.get('data', {})

    if isDebug:
        sys.stderr.write(f"URL: {url}\n")
        sys.stderr.write(f"Method: {method}\n")
        sys.stderr.write(f"Headers: {headers}\n")
        sys.stderr.write(f"Data: {data}\n")

    # Make the request
    try:
        response = requests.request(method, url, headers=headers, json=data)
    except requests.RequestException as error:
        # Handle error that contains "Failed to resolve"
        if "Failed to resolve" in str(error):
            sys.stderr.write(f"Error making request to {url}. Please check the URL and your network connection.\n")
            sys.stderr.write(f"Error: {error}\n")
        else:
            sys.stderr.write(f"Error making request: {error}\n")
        sys.exit(1)
    
    # Print the response
    sys.stderr.write(f"Response from {url}:\n")
    print(response.text)

main()
